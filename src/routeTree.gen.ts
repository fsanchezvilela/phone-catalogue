/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server';

import { Route as rootRouteImport } from './routes/__root';
import { Route as IndexRouteImport } from './routes/index';
import { Route as PhonesIdRouteImport } from './routes/phones/$id';
import { ServerRoute as ApiPhonesIndexServerRouteImport } from './routes/api/phones/index';
import { ServerRoute as ApiPhonesIdServerRouteImport } from './routes/api/phones/$id';

const rootServerRouteImport = createServerRootRoute();

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const PhonesIdRoute = PhonesIdRouteImport.update({
  id: '/phones/$id',
  path: '/phones/$id',
  getParentRoute: () => rootRouteImport,
} as any);
const ApiPhonesIndexServerRoute = ApiPhonesIndexServerRouteImport.update({
  id: '/api/phones/',
  path: '/api/phones/',
  getParentRoute: () => rootServerRouteImport,
} as any);
const ApiPhonesIdServerRoute = ApiPhonesIdServerRouteImport.update({
  id: '/api/phones/$id',
  path: '/api/phones/$id',
  getParentRoute: () => rootServerRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/phones/$id': typeof PhonesIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/phones/$id': typeof PhonesIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/phones/$id': typeof PhonesIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/phones/$id';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/phones/$id';
  id: '__root__' | '/' | '/phones/$id';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  PhonesIdRoute: typeof PhonesIdRoute;
}
export interface FileServerRoutesByFullPath {
  '/api/phones/$id': typeof ApiPhonesIdServerRoute;
  '/api/phones': typeof ApiPhonesIndexServerRoute;
}
export interface FileServerRoutesByTo {
  '/api/phones/$id': typeof ApiPhonesIdServerRoute;
  '/api/phones': typeof ApiPhonesIndexServerRoute;
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport;
  '/api/phones/$id': typeof ApiPhonesIdServerRoute;
  '/api/phones/': typeof ApiPhonesIndexServerRoute;
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath;
  fullPaths: '/api/phones/$id' | '/api/phones';
  fileServerRoutesByTo: FileServerRoutesByTo;
  to: '/api/phones/$id' | '/api/phones';
  id: '__root__' | '/api/phones/$id' | '/api/phones/';
  fileServerRoutesById: FileServerRoutesById;
}
export interface RootServerRouteChildren {
  ApiPhonesIdServerRoute: typeof ApiPhonesIdServerRoute;
  ApiPhonesIndexServerRoute: typeof ApiPhonesIndexServerRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/phones/$id': {
      id: '/phones/$id';
      path: '/phones/$id';
      fullPath: '/phones/$id';
      preLoaderRoute: typeof PhonesIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/phones/': {
      id: '/api/phones/';
      path: '/api/phones';
      fullPath: '/api/phones';
      preLoaderRoute: typeof ApiPhonesIndexServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
    '/api/phones/$id': {
      id: '/api/phones/$id';
      path: '/api/phones/$id';
      fullPath: '/api/phones/$id';
      preLoaderRoute: typeof ApiPhonesIdServerRouteImport;
      parentRoute: typeof rootServerRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PhonesIdRoute: PhonesIdRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPhonesIdServerRoute: ApiPhonesIdServerRoute,
  ApiPhonesIndexServerRoute: ApiPhonesIndexServerRoute,
};
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>();
